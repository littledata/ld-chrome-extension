<<<<<<< HEAD
"use strict";
=======
'use strict';
>>>>>>> 6c7e671f6f414158c13f6db5311da5440bc68ee0

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;

var _calculateCellWidthIndex = _interopRequireDefault(require("./calculateCellWidthIndex"));
=======

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _calculateCellWidthIndex = require('./calculateCellWidthIndex');

var _calculateCellWidthIndex2 = _interopRequireDefault(_calculateCellWidthIndex);
>>>>>>> 6c7e671f6f414158c13f6db5311da5440bc68ee0

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces an array of values that describe the largest value length (width) in every column.
 *
 * @param {Array[]} rows
 * @returns {number[]}
 */
<<<<<<< HEAD
const calculateMaximumColumnWidthIndex = rows => {
=======
exports.default = rows => {
>>>>>>> 6c7e671f6f414158c13f6db5311da5440bc68ee0
  if (!rows[0]) {
    throw new Error('Dataset must have at least one row.');
  }

<<<<<<< HEAD
  const columns = new Array(rows[0].length).fill(0);
  rows.forEach(row => {
    const columnWidthIndex = (0, _calculateCellWidthIndex.default)(row);
    columnWidthIndex.forEach((valueWidth, index0) => {
=======
  const columns = _lodash2.default.fill(Array(rows[0].length), 0);

  _lodash2.default.forEach(rows, row => {
    const columnWidthIndex = (0, _calculateCellWidthIndex2.default)(row);

    _lodash2.default.forEach(columnWidthIndex, (valueWidth, index0) => {
>>>>>>> 6c7e671f6f414158c13f6db5311da5440bc68ee0
      if (columns[index0] < valueWidth) {
        columns[index0] = valueWidth;
      }
    });
  });
<<<<<<< HEAD
  return columns;
};

var _default = calculateMaximumColumnWidthIndex;
exports.default = _default;
//# sourceMappingURL=calculateMaximumColumnWidthIndex.js.map
=======

  return columns;
};
>>>>>>> 6c7e671f6f414158c13f6db5311da5440bc68ee0
